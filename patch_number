diff -rupN statelib2/demos/CMakeLists.txt statelib_new2/demos/CMakeLists.txt
--- statelib2/demos/CMakeLists.txt	2022-04-28 03:15:43.801902069 +0000
+++ statelib_new2/demos/CMakeLists.txt	2022-04-28 03:15:55.937841877 +0000
@@ -6,3 +6,9 @@ target_link_libraries(demo_menu ${STATE_
 add_executable(basic basic.c)
 target_link_libraries(basic ${STATE_LIBRARIES})
 
+
+add_executable(demo3 search_number__game.c)
+target_link_libraries(demo3 ${STATE_LIBRARIES})
+
+add_executable(demo3_v2 game1__2.c)
+target_link_libraries(demo3_v2 ${STATE_LIBRARIES})
diff -rupN statelib2/demos/demo_menu.c statelib_new2/demos/demo_menu.c
--- statelib2/demos/demo_menu.c	2022-04-28 03:15:43.801902069 +0000
+++ statelib_new2/demos/demo_menu.c	2022-04-28 03:15:55.937841877 +0000
@@ -1,5 +1,7 @@
 #include <state.h>
 #include <stdio.h>
+//ajouter la documentation ici sera pas mal pour que le game
+//implemente apres sera plus simple et flexible en lecture direct.
 
 enum main_menu_values{
     main_OPTION,
diff -rupN statelib2/demos/game1__2.c statelib_new2/demos/game1__2.c
--- statelib2/demos/game1__2.c	1970-01-01 00:00:00.000000000 +0000
+++ statelib_new2/demos/game1__2.c	2022-04-28 03:15:55.937841877 +0000
@@ -0,0 +1,132 @@
+#include <state.h>
+#include <stdio.h>
+#include<stdlib.h>
+#include<stdlib.h>
+//#include<stdbool.h>
+
+
+//il faut pas trop entrer dans les details car ce n'est pas tellement le but.
+//une execution correcte suffit+une comprehension partielle boostee a l'utilisation
+//(la pratique) est TOP!!!!
+enum main_menu_values{
+    main_OPTION,
+    main_RUN,
+    main_EXIT
+};
+
+
+int menu_init(void *p){
+    int i;
+    while(1){
+        printf("choices are:\n");
+        printf("1. starting game:\n");
+        printf("2. run\n");
+        printf("3. exit\n");
+        if (scanf("%d",&i)!=1) return main_EXIT;
+        if (i==1) return main_OPTION;
+	if (i==2) return main_EXIT;
+        if (i==3) return main_EXIT;
+	if(i<0 || i>3) return main_EXIT;
+    }
+}
+
+
+enum option_values{
+    option_BACK,
+    option_EXIT,
+    option_RUN
+};
+
+struct Job{
+    int a;
+    int b;
+};
+
+int game_start(void* p){
+  struct Job *j=p;
+    int i;
+    while(1){
+        printf("START for the fun: \n");
+        printf("1.choose a value for the current testing number:\n");
+	printf("2.run for veryfing the result test:\n");
+        printf("3.back\n");
+        printf("4.exit\n");
+        if (scanf("%d",&i)!=1) return option_EXIT;
+        if (i==1){
+            printf("value? ");
+            scanf("%d",&(j->b));
+        }
+	if(i==2) return option_RUN;
+        if (i==3) return option_BACK;
+        if (i==4) return option_EXIT;
+    }
+}
+
+enum run_values{
+		run_FINISH,
+		run_FINISH2,
+		run_FINISH3,
+};
+
+
+int rslt_verify(void* p){
+    struct Job *j=p;
+    printf("---------\n doing the job...\n");
+    printf("---------\n final result: %s\n",(j->a==j->b)?"true":"false");
+    if(j->a==j->b){
+      printf("\t\t*************YOU WIN!**************\n");return run_FINISH;
+    }
+    if(j->a>j->b){
+      printf("\t\t*************to low!**************\n");return run_FINISH2;
+    }
+    if(j->a<j->b){
+      printf("\t\t*************to high!**************\n");return run_FINISH3;
+    }
+}
+
+
+int main(){
+  struct Job job;
+  job.a=rand()%21;
+  struct StateMachine *machine;
+  machine=state_newmachine();
+  state_add_transition(machine,menu_init,  main_EXIT,   NULL);
+  state_add_transition(machine,menu_init,  main_OPTION, game_start);
+  state_add_transition(machine,menu_init,  main_RUN,    NULL);
+  /*! \brief comments for the current library extern using
+   * \on initialise la machine puis une valeur dans job.a a conserver pour 
+   * \la verification apres avec le saut (etiquette de transition) :option_RUN
+   * \qui doit etre fait par l'utilisateur
+   * \a partir de menu_init on retourne l'option de type int
+   * \qui va nous permettre de determiner la prochaine fonction a faire(prochain
+   * \etat) par exemple si scanf("%d\n",&i)!=1 (incomplet) alors return
+   * \main_OPTION qui depuis les parametres de la ligne numero 2
+   * \va aller a game_start ainsi de suite..(c'est facile avec la superposition
+   * \des deux demos: demo_menu et notre 1er<jet.)
+   */
+  
+  state_add_transition(machine,game_start,option_EXIT, NULL);
+  state_add_transition(machine,game_start,option_BACK, menu_init);
+  state_add_transition(machine,game_start,option_RUN, rslt_verify);
+  /*! \brief the same
+   * \for the others sub_transitions.
+   */
+  
+
+  state_add_transition(machine,rslt_verify,run_FINISH,NULL);
+  state_add_transition(machine,rslt_verify,run_FINISH2,game_start);
+  state_add_transition(machine,rslt_verify,run_FINISH3,game_start);
+
+  /*! \brief la c'est different
+   * \si ca renvoie option_RUN puis rslt_verify renvoie run_FINISH2 on fait un NULL
+   * \pour arreter le programme car le nombre a ete trouve
+   * \mais dans le cas contraire on relance le jeu depuis main_OPTION(i==1)
+   * \rslt donc game_start saut ainside suite.
+   */
+  
+  state_start(machine,menu_init,&job);
+  state_free(machine);
+  return 0;
+}
+//on a fait des commentaires juste pour s'entrainer au format
+//le rslt reste pratiquement le meme et cest ca qu'on veut..///
diff -rupN statelib2/demos/search_number__game.c statelib_new2/demos/search_number__game.c
--- statelib2/demos/search_number__game.c	1970-01-01 00:00:00.000000000 +0000
+++ statelib_new2/demos/search_number__game.c	2022-04-28 03:15:55.937841877 +0000
@@ -0,0 +1,120 @@
+#include <state.h>
+#include <stdio.h>
+#include<stdlib.h>
+#include<stdlib.h>
+//#include<stdbool.h>
+
+
+//il faut pas trop entrer dans les details car ce n'est pas tellement le but.
+//une execution correcte suffit+une comprehension partielle boostee a l'utilisation
+//(la pratique) est TOP!!!!
+enum main_menu_values{
+    main_OPTION,
+    main_RUN,
+    main_EXIT
+};
+
+
+int menu_init(void *p){
+    int i;
+    while(1){
+        printf("choices are:\n");
+        printf("1. starting game:\n");
+        printf("2. run\n");
+        printf("3. exit\n");
+        if (scanf("%d",&i)!=1) return main_EXIT;
+        if (i==1) return main_OPTION;
+	if (i==2) return main_EXIT;
+        if (i==3) return main_EXIT;
+	if(i<0 || i>3) return main_EXIT;
+    }
+}
+
+
+enum option_values{
+    option_BACK,
+    option_EXIT,
+    option_RUN
+};
+
+struct Job{
+    int a;
+    int b;
+};
+
+int game_start(void* p){
+  struct Job *j=p;
+    int i;
+    while(1){
+        printf("START for the fun: \n");
+        printf("1.choose a value for the current testing number:\n");
+	printf("2.run for veryfing the result test:\n");
+        printf("3.back\n");
+        printf("4.exit\n");
+        if (scanf("%d",&i)!=1) return option_EXIT;
+        if (i==1){
+            printf("value? ");
+            scanf("%d",&(j->b));
+        }
+	if(i==2) return option_RUN;
+        if (i==3) return option_BACK;
+        if (i==4) return option_EXIT;
+    }
+}
+
+enum run_values{
+		run_FINISH,
+		run_FINISH2
+};
+
+
+int rslt_verify(void* p){
+    struct Job *j=p;
+    printf("---------\n doing the job...\n");
+    printf("---------\n final result: %s\n",(j->a==j->b)?"true":"false");
+    if(j->a==j->b){
+      printf("\t\t*************YOU WIN!**************\n");return run_FINISH;
+    }
+    return run_FINISH2;
+}
+
+int main(){
+  struct Job job;
+  job.a=50;
+  struct StateMachine *machine;
+  machine=state_newmachine();
+  state_add_transition(machine,menu_init,  main_EXIT,   NULL);
+  state_add_transition(machine,menu_init,  main_OPTION, game_start);
+  state_add_transition(machine,menu_init,  main_RUN,    NULL);
+  /*! \brief comments for the current library extern using
+   * \on initialise la machine puis une valeur dans job.a a conserver pour 
+   * \la verification apres avec le saut (etiquette de transition) :option_RUN
+   * \qui doit etre fait par l'utilisateur
+   * \a partir de menu_init on retourne l'option de type int
+   * \qui va nous permettre de determiner la prochaine fonction a faire(prochain
+   * \etat) par exemple si scanf("%d\n",&i)!=1 (incomplet) alors return
+   * \main_OPTION qui depuis les parametres de la ligne numero 2
+   * \va aller a game_start ainsi de suite..(c'est facile avec la superposition
+   * \des deux demos: demo_menu et notre 1er<jet.)
+   */
+  
+  state_add_transition(machine,game_start,option_EXIT, NULL);
+  state_add_transition(machine,game_start,option_BACK, menu_init);
+  state_add_transition(machine,game_start,option_RUN, rslt_verify);
+  /*! \brief the same
+   * \for the others sub_transitions.
+   */
+
+  state_add_transition(machine,rslt_verify,run_FINISH,NULL);
+  state_add_transition(machine,rslt_verify,run_FINISH2,game_start);
+  /*! \brief la c'est different
+   * \si ca renvoie option_RUN puis rslt_verify renvoie run_FINISH2 on fait un NULL
+   * \pour arreter le programme car le nombre a ete trouve
+   * \mais dans le cas contraire on relance le jeu depuis main_OPTION(i==1)
+   * \rslt donc game_start saut ainside suite.
+   */
+  
+  state_start(machine,menu_init,&job);
+  state_free(machine);
+  return 0;
+}
Les fichiers binaires statelib2/.git/index et statelib_new2/.git/index sont diffÃ©rents
diff -rupN statelib2/src/state.c statelib_new2/src/state.c
--- statelib2/src/state.c	2022-04-28 03:15:43.801902069 +0000
+++ statelib_new2/src/state.c	2022-04-28 03:15:55.937841877 +0000
@@ -92,7 +92,18 @@ int state_start(struct StateMachine *mac
         while ((p!=NULL) && ((p->from!=start) || (p->value!=lastValue))){
             p=p->next;
         }
-        if (p==NULL) return -1;
+        if (p==NULL) return -1;//sortir de la machine si
+	//p==NULL car la machine a etat dit dans ce cas
+	//que le courant machine->list est NULL donc pas de p->value
+	//<=>pas de transition declaree pour la machine a etat
+	//<=>donc retour du code erreur: -1 dans state.h
+	//ce cas n'a pas ete documente=>documentation format doxygen
+	//dans state.h(voir remarque dans resume.txt).
+	//tout ca pour faire un state_start soit un nouveau etat en
+	//consideration dans la machine courante.
+	//le fichier demos/demo_menu.c avant _basic.c pour bien comprendre.
+	//c'est un lancement comme on a dit tout au debut 1.exo1/qst1.///()   .
+	//c'est fait.//.
         if (p->to==NULL) return lastValue;
         start=p->to;
     }
diff -rupN statelib2/src/state.h statelib_new2/src/state.h
--- statelib2/src/state.h	2022-04-28 03:15:43.801902069 +0000
+++ statelib_new2/src/state.h	2022-04-28 03:15:55.937841877 +0000
@@ -58,7 +58,7 @@ int state_add_transition(struct StateMac
  * \param machine a pointer to the state machine
  * \param start the first state that will be run
  * \param data a pointer that will be passed to all states
- * \return the return value of the last state run
+ * \return the return value of the last state run, of -1 if error.
  */
 int state_start(struct StateMachine *machine,StateFunc start, void *data);
 
